CREATE TABLE DATA_SHEETS
(
  CODE VARCHAR2(200) NOT NULL,
  CONSTRAINT DATA_SHEETS_PK PRIMARY KEY (CODE)
);

CREATE TABLE DATA_SHEET_COLUMN_TYPES
(
  CODE               VARCHAR2(200)             NOT NULL,
  VALUE_TYPE         VARCHAR2(200)             NOT NULL,
  IS_FIXED_VALUE     NUMBER(1, 0) DEFAULT 0    NOT NULL,
  IS_MULTIPLE_CHOICE NUMBER(1, 0) DEFAULT 0    NOT NULL,
  CONSTRAINT DATA_SHEET_COL_TYPE_PK PRIMARY KEY (CODE)
);

CREATE TABLE DATA_SHEET_COLUMN_CODES
(
  CODE VARCHAR2(200) NOT NULL,
  CONSTRAINT DATA_SHEET_COL_CODES_PK PRIMARY KEY (CODE)
);

CREATE TABLE DATA_SHEET_COLUMNS
(
  ID              INTEGER        NOT NULL,
  CODE            VARCHAR2(200)  NOT NULL,
  DATA_SHEET_CODE VARCHAR2(200)  NOT NULL,
  TYPE            VARCHAR2(200)  NOT NULL,
  TITLE           VARCHAR2(4000) NOT NULL,
  CONSTRAINT DATA_SHEET_COLUMNS_PK PRIMARY KEY (ID),
  CONSTRAINT DATA_SHEET_COLUMNS_CODES_FK FOREIGN KEY (CODE) REFERENCES DATA_SHEET_COLUMN_CODES (CODE),
  CONSTRAINT DATA_SHEET_COLUMNS_TYPES_FK FOREIGN KEY (TYPE) REFERENCES DATA_SHEET_COLUMN_TYPES (CODE),
  CONSTRAINT DATA_SHEET_COLUMNS_CODE_FK FOREIGN KEY (DATA_SHEET_CODE) REFERENCES DATA_SHEETS (CODE)
);

CREATE SEQUENCE DATA_SHEET_COLUMNS_SEQ;
CREATE OR REPLACE TRIGGER T_DATA_SHEET_COLUMNS_SEQ
BEFORE INSERT ON DATA_SHEET_COLUMNS
FOR EACH ROW
WHEN (NEW.ID IS NULL)
  BEGIN
    SELECT DATA_SHEET_COLUMNS_SEQ.NEXTVAL
    INTO :NEW.ID
    FROM DUAL;
  END;
/
ALTER TRIGGER T_DATA_SHEET_COLUMNS_SEQ ENABLE;

CREATE TABLE DATA_SHEET_VALUE_CODES
(
  CODE          VARCHAR2(200) NOT NULL,
  ORD           INTEGER,
  DEFAULT_VALUE INTEGER,
  CONSTRAINT DATA_SHEET_VALUE_CODES_PK PRIMARY KEY (CODE)
);

CREATE TABLE DATA_SHEET_VALUES
(
  ID          INTEGER       NOT NULL,
  CODE        VARCHAR2(200) NOT NULL,
  COLUMN_TYPE VARCHAR2(200) NOT NULL,
  VALUE       VARCHAR2(200) NOT NULL,
  CONSTRAINT DATA_SHEET_VALUES_PK PRIMARY KEY (ID),
  CONSTRAINT DATA_SHEET_VALUES_CODES_FK FOREIGN KEY (CODE) REFERENCES DATA_SHEET_VALUE_CODES (CODE),
  CONSTRAINT DATA_SHEET_VALUES_TYPES_FK FOREIGN KEY (COLUMN_TYPE) REFERENCES DATA_SHEET_COLUMN_TYPES (CODE)
);

CREATE SEQUENCE DATA_SHEET_VALUES_SEQ;
CREATE OR REPLACE TRIGGER T_DATA_SHEET_VALUES_SEQ
BEFORE INSERT ON DATA_SHEET_VALUES
FOR EACH ROW
WHEN (NEW.ID IS NULL)
  BEGIN
    SELECT DATA_SHEET_VALUES_SEQ.NEXTVAL
    INTO :NEW.ID
    FROM DUAL;
  END;
/
ALTER TRIGGER T_DATA_SHEET_VALUES_SEQ ENABLE;

CREATE TABLE ACADEMIC_YEARS
(
  ACADEMIC_YEAR VARCHAR2(9) NOT NULL,
  CONSTRAINT ACADEMIC_YEARS_PK PRIMARY KEY (ACADEMIC_YEAR)
);

CREATE TABLE ISCEDS
(
  CODE       VARCHAR2(4)   NOT NULL,
  FIELD_NAME VARCHAR2(200) NOT NULL,
  CONSTRAINT ISCEDS_PK PRIMARY KEY (CODE)
);

CREATE TABLE DATA_SHEET_ROWS
(
  ID              INTEGER       NOT NULL,
  ACADEMIC_YEAR   VARCHAR2(9)   NOT NULL,
  INST_ID         INTEGER       NOT NULL,
  DATA_SHEET_CODE VARCHAR2(200) NOT NULL,
  PARTNER_INST_ID INTEGER,
  ISCED_CODE      VARCHAR2(4),
  CONSTRAINT DATA_SHEET_ROWS_PK PRIMARY KEY (ID),
  CONSTRAINT DATA_SHEET_ROWS_YEARS_FK FOREIGN KEY (ACADEMIC_YEAR) REFERENCES ACADEMIC_YEARS (ACADEMIC_YEAR),
  CONSTRAINT DATA_SHEET_ROWS_INST_FK FOREIGN KEY (INST_ID) REFERENCES INSTITUTIONS (ID),
  CONSTRAINT DATA_SHEET_ROWS_CODE_FK FOREIGN KEY (DATA_SHEET_CODE) REFERENCES DATA_SHEETS (CODE),
  CONSTRAINT DATA_SHEET_ROWS_PART_INST_FK FOREIGN KEY (PARTNER_INST_ID) REFERENCES INSTITUTIONS (ID),
  CONSTRAINT DATA_SHEET_ROWS_ISCED_FK FOREIGN KEY (ISCED_CODE) REFERENCES ISCEDS (CODE)
);

CREATE SEQUENCE DATA_SHEET_ROWS_SEQ;
CREATE OR REPLACE TRIGGER T_DATA_SHEET_ROWS_SEQ
BEFORE INSERT ON DATA_SHEET_ROWS
FOR EACH ROW
WHEN (NEW.ID IS NULL)
  BEGIN
    SELECT DATA_SHEET_ROWS_SEQ.NEXTVAL
    INTO :NEW.ID
    FROM DUAL;
  END;
/
ALTER TRIGGER T_DATA_SHEET_ROWS_SEQ ENABLE;

CREATE TABLE DATA_SHEET_ROW_VALUES
(
  ID          INTEGER       NOT NULL,
  ROW_ID      INTEGER       NOT NULL,
  COLUMN_CODE VARCHAR2(200) NOT NULL,
  VALUE_CODE  VARCHAR2(200),
  CONSTRAINT DATA_SHEET_ROW_VALUES_PK PRIMARY KEY (ID),
  CONSTRAINT DATA_SHEET_ROW_VALUES_ROWS_FK FOREIGN KEY (ROW_ID) REFERENCES DATA_SHEET_ROWS (ID),
  CONSTRAINT DATA_SHEET_ROW_VAL_COL_COD_FK FOREIGN KEY (COLUMN_CODE) REFERENCES DATA_SHEET_COLUMN_CODES (CODE),
  CONSTRAINT DATA_SHEET_ROW_VAL_VAL_COD_FK FOREIGN KEY (VALUE_CODE) REFERENCES DATA_SHEET_VALUE_CODES (CODE)
);

CREATE SEQUENCE DATA_SHEET_ROW_VALUES_SEQ;
CREATE OR REPLACE TRIGGER T_DATA_SHEET_ROW_VALUES_SEQ
BEFORE INSERT ON DATA_SHEET_ROW_VALUES
FOR EACH ROW
WHEN (NEW.ID IS NULL)
  BEGIN
    SELECT DATA_SHEET_ROW_VALUES_SEQ.NEXTVAL
    INTO :NEW.ID
    FROM DUAL;
  END;
/
ALTER TRIGGER T_DATA_SHEET_ROW_VALUES_SEQ ENABLE;

CREATE TABLE DATA_SHEET_UPLOADS
(
  ID              INTEGER       NOT NULL,
  UPLOAD_DATE     DATE          NOT NULL,
  USER_ID         INTEGER       NOT NULL,
  DATA_SHEET_CODE VARCHAR2(200) NOT NULL,
  CONSTRAINT DATA_SHEET_UPLOADS_PK PRIMARY KEY (ID),
  CONSTRAINT DATA_SHEET_UPLOADS_USERS_FK FOREIGN KEY (USER_ID) REFERENCES USERS (ID),
  CONSTRAINT DATA_SHEET_UPLOADS_CODE_FK FOREIGN KEY (DATA_SHEET_CODE) REFERENCES DATA_SHEETS (CODE)
);

CREATE SEQUENCE DATA_SHEET_UPLOADS_SEQ;
CREATE OR REPLACE TRIGGER T_DATA_SHEET_UPLOADS_SEQ
BEFORE INSERT ON DATA_SHEET_UPLOADS
FOR EACH ROW
WHEN (NEW.ID IS NULL)
  BEGIN
    SELECT DATA_SHEET_UPLOADS_SEQ.NEXTVAL
    INTO :NEW.ID
    FROM DUAL;
  END;
/
ALTER TRIGGER T_DATA_SHEET_UPLOADS_SEQ ENABLE;

CREATE TABLE DATA_SHEET_UPLOAD_ERRORS
(
  ID         INTEGER        NOT NULL,
  UPLOAD_ID  INTEGER        NOT NULL,
  COLUMN_ID  INTEGER,
  ROW_NUM    INTEGER,
  CELL_VALUE VARCHAR2(200),
  ERROR_DESC VARCHAR2(2000) NOT NULL,
  CONSTRAINT DATA_SHEET_UPLOAD_ERRORS_PK PRIMARY KEY (ID),
  CONSTRAINT DATA_SHEET_UPLOAD_ERR_UPL_FK FOREIGN KEY (UPLOAD_ID) REFERENCES DATA_SHEET_UPLOADS (ID),
  CONSTRAINT DATA_SHEET_UPLOAD_ERR_COL_FK FOREIGN KEY (COLUMN_ID) REFERENCES DATA_SHEET_COLUMNS (ID)
);

CREATE SEQUENCE DATA_SHEET_UPLOAD_ERRORS_SEQ;
CREATE OR REPLACE TRIGGER T_DATA_SHEET_UPLOAD_ERRORS_SEQ
BEFORE INSERT ON DATA_SHEET_UPLOAD_ERRORS
FOR EACH ROW
WHEN (NEW.ID IS NULL)
  BEGIN
    SELECT DATA_SHEET_UPLOAD_ERRORS_SEQ.NEXTVAL
    INTO :NEW.ID
    FROM DUAL;
  END;
/
ALTER TRIGGER T_DATA_SHEET_UPLOAD_ERRORS_SEQ ENABLE;